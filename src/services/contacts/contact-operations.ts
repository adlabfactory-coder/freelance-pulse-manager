
import { supabase } from '@/lib/supabase-client';
import { Contact } from './types';
import { toast } from 'sonner';
import { UserRole } from '@/types';

export const contactOperationsService = {
  async getContacts(userId?: string, userRole?: string, includeDeleted: boolean = false): Promise<Contact[]> {
    try {
      console.log("üîÑ R√©cup√©ration des contacts...", { userId, userRole, includeDeleted });
      
      let query = supabase
        .from('contacts')
        .select('*');
      
      // Si includeDeleted est false, ne pas r√©cup√©rer les contacts dans le dossier "trash"
      if (!includeDeleted) {
        query = query.not('folder', 'eq', 'trash');
      }
      
      // Tri par date de cr√©ation d√©croissante
      query = query.order('createdAt', { ascending: false });
      
      // Si l'utilisateur n'est ni admin ni super_admin, filtrer les contacts
      if (userRole !== UserRole.ADMIN && userRole !== UserRole.SUPER_ADMIN) {
        if (userRole === 'freelancer' && userId) {
          console.log("Filtrage des contacts pour le freelancer:", userId);
          query = query.eq('assignedTo', userId);
        } else if (userId) {
          // Pour d'autres r√¥les avec des restrictions
          query = query.eq('assignedTo', userId);
        }
      } else {
        console.log("Acc√®s admin: r√©cup√©ration de tous les contacts");
      }
      
      const { data, error } = await query;
      
      if (error) {
        console.error("Erreur Supabase:", error);
        throw error;
      }
      
      console.log(`‚úÖ ${data?.length || 0} contacts r√©cup√©r√©s${includeDeleted ? ' (y compris dossier trash)' : ''}`);
      
      // Si aucun contact n'est r√©cup√©r√©, afficher un message de d√©bogage
      if (!data || data.length === 0) {
        console.log("Aucun contact trouv√© dans la table 'contacts'");
        
        // V√©rifier si la table existe et a des donn√©es
        const { count, error: countError } = await supabase
          .from('contacts')
          .select('*', { count: 'exact', head: true });
          
        if (countError) {
          console.error("Erreur lors de la v√©rification de la table 'contacts':", countError);
        } else {
          console.log(`La table 'contacts' contient ${count} enregistrements au total`);
        }
      } else {
        // Afficher la r√©partition des contacts par dossier et par statut
        const trashCount = data.filter(contact => contact.folder === 'trash').length;
        console.log(`R√©partition des contacts: ${trashCount} dans le dossier trash, ${data.length - trashCount} actifs`);
        
        // Afficher la r√©partition par statut
        const statusCounts = data.reduce((acc, contact) => {
          acc[contact.status] = (acc[contact.status] || 0) + 1;
          return acc;
        }, {} as Record<string, number>);
        
        console.log("R√©partition par statut:", statusCounts);
      }
      
      return data || [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des contacts:', error);
      throw error;
    }
  },

  async getContactById(contactId: string): Promise<Contact | null> {
    try {
      const { data, error } = await supabase
        .from('contacts')
        .select('*')
        .eq('id', contactId)
        .single();
      
      if (error) {
        throw error;
      }
      
      return data;
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration du contact ${contactId}:`, error);
      return null;
    }
  },

  async getContactsByFreelancer(freelancerId: string): Promise<Contact[]> {
    try {
      const { data, error } = await supabase
        .from('contacts')
        .select('*')
        .eq('assignedTo', freelancerId)
        .not('folder', 'eq', 'trash')
        .order('createdAt', { ascending: false });
      
      if (error) {
        throw error;
      }
      
      return data || [];
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration des contacts du freelancer ${freelancerId}:`, error);
      return [];
    }
  },

  async updateContact(contactId: string, contactData: Partial<Contact>): Promise<Contact | null> {
    try {
      const { data, error } = await supabase
        .from('contacts')
        .update({
          ...contactData,
          updatedAt: new Date().toISOString()
        })
        .eq('id', contactId)
        .select()
        .single();
      
      if (error) {
        throw error;
      }
      
      toast.success("Contact mis √† jour", {
        description: "Le contact a √©t√© mis √† jour avec succ√®s.",
      });
      
      return data;
    } catch (error: any) {
      console.error(`Erreur lors de la mise √† jour du contact ${contactId}:`, error);
      
      toast.error("Erreur", {
        description: `Impossible de mettre √† jour le contact: ${error.message}`,
      });
      
      return null;
    }
  },

  async deleteContact(contactId: string): Promise<boolean> {
    try {
      // Au lieu de marquer le contact comme supprim√© avec deleted_at, 
      // nous le d√©pla√ßons dans le dossier 'trash'
      const { error } = await supabase
        .from('contacts')
        .update({ 
          folder: 'trash',
          updatedAt: new Date().toISOString()
        })
        .eq('id', contactId);
      
      if (error) {
        throw error;
      }
      
      toast.success("Contact supprim√©", {
        description: "Le contact a √©t√© d√©plac√© dans la corbeille.",
      });
      
      return true;
    } catch (error: any) {
      console.error(`Erreur lors de la suppression du contact ${contactId}:`, error);
      
      toast.error("Erreur", {
        description: `Impossible de supprimer le contact: ${error.message}`,
      });
      
      return false;
    }
  },

  async restoreContact(contactId: string): Promise<boolean> {
    try {
      // Restaurer le contact en le d√©pla√ßant du dossier 'trash' vers 'general'
      const { error } = await supabase
        .from('contacts')
        .update({ 
          folder: 'general',
          updatedAt: new Date().toISOString()
        })
        .eq('id', contactId);
      
      if (error) {
        throw error;
      }
      
      toast.success("Contact restaur√©", {
        description: "Le contact a √©t√© restaur√© avec succ√®s.",
      });
      
      return true;
    } catch (error: any) {
      console.error(`Erreur lors de la restauration du contact ${contactId}:`, error);
      
      toast.error("Erreur", {
        description: `Impossible de restaurer le contact: ${error.message}`,
      });
      
      return false;
    }
  },

  async permanentlyDeleteContact(contactId: string): Promise<boolean> {
    try {
      // Supprimer d√©finitivement le contact de la base de donn√©es
      const { error } = await supabase
        .from('contacts')
        .delete()
        .eq('id', contactId);
      
      if (error) {
        throw error;
      }
      
      toast.success("Contact supprim√© d√©finitivement", {
        description: "Le contact a √©t√© supprim√© d√©finitivement de la base de donn√©es.",
      });
      
      return true;
    } catch (error: any) {
      console.error(`Erreur lors de la suppression d√©finitive du contact ${contactId}:`, error);
      
      toast.error("Erreur", {
        description: `Impossible de supprimer d√©finitivement le contact: ${error.message}`,
      });
      
      return false;
    }
  }
};
