
import { User, UserRole } from '@/types';
import { toast } from '@/components/ui/use-toast';
import { getMockUsers } from '@/utils/supabase-mock-data';

/**
 * R√©cup√®re tous les utilisateurs
 */
export const fetchUsers = async (): Promise<User[]> => {
  try {
    console.log("üîÑ Tentative de r√©cup√©ration des utilisateurs");
    
    // En mode production, ne retourner que les administrateurs
    const mockUsers = getMockUsers().filter(user => 
      user.role === UserRole.ADMIN || user.role === UserRole.SUPER_ADMIN
    );
    
    console.log(`‚úÖ R√©cup√©ration r√©ussie: ${mockUsers.length} utilisateurs (administrateurs uniquement)`);
    return mockUsers;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', error);
    // Retourner un tableau avec uniquement les admins en cas d'erreur
    return getMockUsers().filter(user => 
      user.role === UserRole.ADMIN || user.role === UserRole.SUPER_ADMIN
    );
  }
};

/**
 * R√©cup√®re tous les freelancers
 */
export const fetchFreelancers = async (): Promise<User[]> => {
  try {
    console.log("üîÑ Tentative de r√©cup√©ration des freelancers");
    
    // En mode d√©monstration, retourner tous les utilisateurs avec le r√¥le FREELANCER
    const mockUsers = getMockUsers().filter(user => 
      user.role === UserRole.FREELANCER
    );
    
    console.log(`‚úÖ R√©cup√©ration r√©ussie: ${mockUsers.length} freelancers`);
    return mockUsers;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des freelancers:', error);
    // Retourner un tableau avec uniquement les freelancers en cas d'erreur
    return getMockUsers().filter(user => 
      user.role === UserRole.FREELANCER
    );
  }
};

/**
 * R√©cup√®re tous les charg√©s de compte
 */
export const fetchAccountManagers = async (): Promise<User[]> => {
  try {
    console.log("üîÑ Tentative de r√©cup√©ration des charg√©s de compte");
    
    // En mode d√©monstration, retourner tous les utilisateurs avec le r√¥le ACCOUNT_MANAGER
    const mockUsers = getMockUsers().filter(user => 
      user.role === UserRole.ACCOUNT_MANAGER
    );
    
    console.log(`‚úÖ R√©cup√©ration r√©ussie: ${mockUsers.length} charg√©s de compte`);
    return mockUsers;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des charg√©s de compte:', error);
    // Retourner un tableau avec uniquement les charg√©s de compte en cas d'erreur
    return getMockUsers().filter(user => 
      user.role === UserRole.ACCOUNT_MANAGER
    );
  }
};
