
import { User, UserRole } from '@/types';
import { toast } from 'sonner';
import { supabase } from '@/lib/supabase-client';
import { getMockUsers } from '@/utils/supabase-mock-data';

/**
 * R√©cup√®re tous les utilisateurs
 */
export const fetchUsers = async (): Promise<User[]> => {
  try {
    console.log("üîÑ Tentative de r√©cup√©ration des utilisateurs");
    
    // R√©cup√©rer tous les utilisateurs actifs
    const { data: users, error } = await supabase
      .from('users')
      .select('*')
      .is('deleted_at', null);
    
    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', error);
      // Fallback √† la version mock en cas d'erreur
      return getMockUsers().filter(user => 
        user.role === UserRole.ADMIN || user.role === UserRole.SUPER_ADMIN
      );
    }
    
    if (users && users.length > 0) {
      const adminUsers = users.filter(user => 
        user.role === UserRole.ADMIN || user.role === UserRole.SUPER_ADMIN
      );
      console.log(`‚úÖ R√©cup√©ration r√©ussie: ${adminUsers.length} administrateurs`);
      return adminUsers;
    }
    
    // En mode production, ne retourner que les administrateurs
    const mockUsers = getMockUsers().filter(user => 
      user.role === UserRole.ADMIN || user.role === UserRole.SUPER_ADMIN
    );
    
    console.log(`‚úÖ R√©cup√©ration r√©ussie: ${mockUsers.length} utilisateurs (administrateurs uniquement - mode mock)`);
    return mockUsers;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', error);
    // Retourner un tableau avec uniquement les admins en cas d'erreur
    return getMockUsers().filter(user => 
      user.role === UserRole.ADMIN || user.role === UserRole.SUPER_ADMIN
    );
  }
};

/**
 * R√©cup√®re tous les freelancers
 */
export const fetchFreelancers = async (): Promise<User[]> => {
  try {
    console.log("üîÑ Tentative de r√©cup√©ration des freelancers");
    
    // R√©cup√©rer tous les utilisateurs actifs avec le r√¥le FREELANCER
    const { data: users, error } = await supabase
      .from('users')
      .select('*')
      .eq('role', UserRole.FREELANCER)
      .is('deleted_at', null);
    
    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des freelancers:', error);
      return getMockUsers().filter(user => user.role === UserRole.FREELANCER);
    }
    
    if (users && users.length > 0) {
      console.log(`‚úÖ R√©cup√©ration r√©ussie: ${users.length} freelancers`);
      return users as User[];
    }
    
    // Mode d√©mo
    const mockUsers = getMockUsers().filter(user => user.role === UserRole.FREELANCER);
    console.log(`‚úÖ R√©cup√©ration r√©ussie: ${mockUsers.length} freelancers (mode mock)`);
    return mockUsers;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des freelancers:', error);
    // Retourner un tableau avec uniquement les freelancers en cas d'erreur
    return getMockUsers().filter(user => user.role === UserRole.FREELANCER);
  }
};

/**
 * R√©cup√®re tous les charg√©s de compte
 */
export const fetchAccountManagers = async (): Promise<User[]> => {
  try {
    console.log("üîÑ Tentative de r√©cup√©ration des charg√©s de compte");
    
    // R√©cup√©rer tous les utilisateurs actifs avec le r√¥le ACCOUNT_MANAGER
    const { data: users, error } = await supabase
      .from('users')
      .select('*')
      .eq('role', UserRole.ACCOUNT_MANAGER)
      .is('deleted_at', null);
    
    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des charg√©s de compte:', error);
      return getMockUsers().filter(user => user.role === UserRole.ACCOUNT_MANAGER);
    }
    
    if (users && users.length > 0) {
      console.log(`‚úÖ R√©cup√©ration r√©ussie: ${users.length} charg√©s de compte r√©els`);
      return users as User[];
    }
    
    // Mode d√©mo
    const mockUsers = getMockUsers().filter(user => user.role === UserRole.ACCOUNT_MANAGER);
    console.log(`‚úÖ R√©cup√©ration r√©ussie: ${mockUsers.length} charg√©s de compte (mode mock)`);
    return mockUsers;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des charg√©s de compte:', error);
    // Retourner un tableau avec uniquement les charg√©s de compte en cas d'erreur
    return getMockUsers().filter(user => user.role === UserRole.ACCOUNT_MANAGER);
  }
};
