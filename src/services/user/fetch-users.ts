
import { supabase } from '@/lib/supabase';
import { User, UserRole } from '@/types';
import { toast } from '@/components/ui/use-toast';
import { getMockUsers } from '@/utils/supabase-mock-data';
import { checkSupabaseConnection } from '@/lib/supabase';

/**
 * R√©cup√®re tous les utilisateurs depuis Supabase avec meilleure gestion des erreurs
 */
export const fetchUsers = async (): Promise<User[]> => {
  try {
    console.log("üîÑ Tentative de r√©cup√©ration des utilisateurs depuis Supabase");
    
    // V√©rification de l'√©tat de la connexion Supabase
    let shouldUseMockData = false;
    
    try {
      const connectionStatus = await checkSupabaseConnection();
      if (!connectionStatus.success) {
        console.warn("‚ö†Ô∏è Erreur lors de la v√©rification de la connexion:", connectionStatus.message);
        shouldUseMockData = true;
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Exception lors de la v√©rification de la connexion:", error);
      shouldUseMockData = true;
    }
    
    // Utiliser des donn√©es de d√©mo si la connexion a √©chou√©
    if (shouldUseMockData) {
      console.info("‚ÑπÔ∏è Utilisation des donn√©es de d√©mo pour les utilisateurs");
      return getMockUsers();
    }
    
    // La connexion est √©tablie, on tente de r√©cup√©rer les utilisateurs
    try {
      console.log("üîÑ Ex√©cution de la requ√™te Supabase");
      const { data, error } = await supabase
        .from('users')
        .select('*');
      
      if (error) {
        console.warn("‚ö†Ô∏è Erreur Supabase lors de la r√©cup√©ration des utilisateurs:", error.message);
        throw new Error(`Erreur de r√©cup√©ration: ${error.message}`);
      }
      
      if (!data || data.length === 0) {
        console.warn("‚ö†Ô∏è Aucun utilisateur trouv√© dans Supabase, utilisation des donn√©es de d√©mo");
        return getMockUsers();
      }
      
      console.log(`‚úÖ R√©cup√©ration r√©ussie: ${data.length} utilisateurs`);
      
      return data.map(user => ({
        ...user,
        role: user.role as UserRole
      })) as User[];
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', error);
      throw new Error(`Erreur de r√©cup√©ration: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  } catch (error) {
    console.error('‚ùå Erreur fatale lors de la r√©cup√©ration des utilisateurs:', error);
    return getMockUsers();
  }
};
