
import { supabase } from "@/lib/supabase-client";
import { User, UserRole } from "@/types";
import { toast } from "sonner";
import { fetchAccountManagers } from "@/services/user/fetch-users";

/**
 * Service pour g√©rer l'attribution √©quitable des charg√©s de compte
 */
export const accountManagerService = {
  /**
   * Obtient le prochain charg√© de compte selon une distribution √©quitable
   * Utilise un algorithme qui attribue les contacts au charg√© de compte
   * ayant le moins de contacts √† g√©rer
   */
  async getNextAccountManager(): Promise<User | null> {
    try {
      console.log("üîÑ Recherche du prochain charg√© de compte disponible...");
      
      // 1. R√©cup√©rer tous les charg√©s de compte
      const accountManagers = await fetchAccountManagers();
      
      if (!accountManagers || accountManagers.length === 0) {
        console.warn("‚ùå Aucun charg√© de compte disponible dans le syst√®me");
        return null;
      }
      
      console.log(`‚úÖ ${accountManagers.length} charg√©s de compte trouv√©s`);
      
      // 2. Pour chaque charg√© de compte, compter le nombre de contacts assign√©s
      const managerLoads = await Promise.all(
        accountManagers.map(async (manager) => {
          const { count, error } = await supabase
            .from('contacts')
            .select('*', { count: 'exact', head: true })
            .eq('assignedTo', manager.id)
            .not('folder', 'eq', 'trash');
          
          if (error) {
            console.error(`Erreur lors du comptage des contacts pour ${manager.name}:`, error);
            return { manager, count: 0 };
          }
          
          return { 
            manager, 
            count: count || 0 
          };
        })
      );
      
      // 3. Trier les charg√©s de compte par nombre de contacts (ascendant)
      managerLoads.sort((a, b) => a.count - b.count);
      
      // 4. Retourner le charg√© de compte avec le moins de contacts
      const nextManager = managerLoads[0]?.manager || null;
      
      if (nextManager) {
        console.log(`‚úÖ Charg√© de compte s√©lectionn√©: ${nextManager.name} (${nextManager.id}) avec ${managerLoads[0].count} contacts`);
      } else {
        console.warn("‚ùå Impossible de d√©terminer le prochain charg√© de compte");
      }
      
      return nextManager;
    } catch (error) {
      console.error("‚ùå Erreur lors de la s√©lection du prochain charg√© de compte:", error);
      return null;
    }
  },
  
  /**
   * R√©cup√®re des statistiques sur la distribution des contacts
   * entre les charg√©s de compte
   */
  async getDistributionStats(): Promise<{
    manager: User;
    contactCount: number;
  }[]> {
    try {
      // R√©cup√©rer tous les charg√©s de compte
      const accountManagers = await fetchAccountManagers();
      
      if (!accountManagers || accountManagers.length === 0) {
        return [];
      }
      
      // Pour chaque charg√© de compte, compter le nombre de contacts assign√©s
      const stats = await Promise.all(
        accountManagers.map(async (manager) => {
          const { count, error } = await supabase
            .from('contacts')
            .select('*', { count: 'exact', head: true })
            .eq('assignedTo', manager.id)
            .not('folder', 'eq', 'trash');
          
          if (error) {
            console.error(`Erreur lors du comptage des contacts pour ${manager.name}:`, error);
            return { manager, contactCount: 0 };
          }
          
          return { 
            manager, 
            contactCount: count || 0 
          };
        })
      );
      
      // Trier par nombre de contacts (descendant)
      return stats.sort((a, b) => b.contactCount - a.contactCount);
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration des statistiques de distribution:", error);
      return [];
    }
  }
};
